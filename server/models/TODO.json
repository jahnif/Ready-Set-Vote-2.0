// Almost completed. Only need to implement DB, API Routes, and Tests for office field.
Candidate: {
    name: string,
    url: url,
    address: string,
    email: email,
    phone: phone,
    party: { ref: 'Party' },
    contest: { ref: 'Office' }
}

Office: {
    title: string,
    district: { ref: 'District' }
}

// I still don't like how location/Districts are set up. But their overlapping nature makes for messy work; reality isn't a database.
// May only need candidate in Votes, not seat + candidate.
Ballot: {
    districts: [
        {ref: 'District'}
    ],
    endorsersSelected: [
        {ref: 'Endorser'}
    ]
    finalized: Bool (default: false),
    votes: {
        seats: [{ seat: { ref: 'Seat', unique: true }, candidate: { ref: 'Candidate' } }],
        measures: [{ ref: 'Measure', unique: true }]
    }
}

// Can ocdID act in place of country, state, and city entries? -- Yes, appears so.
// Use Google Civic Api representativeInfoByAddress with fields=division to get a user's divs.
// Do we need scope? I don't think so.
District: {
    ocdID: String,
    name: String,
    scope: enum [ 
        "cityCouncil",
        "citywide",
        "congressional",
        "countyCouncil",
        "countywide",
        "judicial",
        "national",
        "schoolBoard",
        "special",
        "stateLower",
        "stateUpper",
        "statewide",
        "township",
        "ward"
    ],
    timestamps: true
}

// Completed DB, API Routes, and Testing.
Measure: {
    title: String,
    description: String,
    options: {
        type: [String],
        validator: [twoChoices, 'Measures must have two choices']
    },
    district: { ref: 'District' }
}

// Validator to limit Measure.options to two choices.
function twoChoices (val) {
    return val.length !== 2;
}

// Completed DB, API Routes, and Testing.
// Problem with locating endorsers - how are they tied to districts?
// sortOrder will grow in complexity and be very difficult to maintain, especially across districts. Need a better solution for frontEnd sorting, maybe just use alphabetical or manual?
Endorser: {
    name: String,
    url: url,
    sortOrder: Int,
    imageUrl: url
}

// Add URL to specific endorsement?
Endorsement: {
    url: url,
    endorser: {ref: 'Endorser'},
    candidate: {ref: 'Candidate'},
    measure: { ref: 'Measure', endorse: Bool }
}

// Completed DB, API Routes, and Testing.
User: {
    name: String,
    password: String (hashed via bcrypt),
    email: email,
    admin: Bool
}

// Completed DB, API Routes, and Testing.
Party: {
    name: String
}